package com.phonepe;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ActivityEventListener;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.Arguments;
import java.util.List;
import static android.app.Activity.RESULT_CANCELED;
import static android.app.Activity.RESULT_OK;

public class PhonePeModule extends ReactContextBaseJavaModule implements ActivityEventListener{

    /**
     * Global variables
     */
    public static int PHONEPE_REQUEST = 777;
    long phonePeVersionCode = -1L;
    private Callback uiCallbackHandler;

    /**
     *  React native application context variable
     */
    ReactApplicationContext mReactApplicationContext = getReactApplicationContext();

    /**
     * Constructor
     * @param reactContext
     */
    public PhonePeModule(@Nullable ReactApplicationContext reactContext) {
        super(reactContext);
        reactContext.addActivityEventListener(this);
    }

    @NonNull
    @Override
    public String getName() {
        return mReactApplicationContext.getString(R.string.phonepe_module);
    }

    /**
     * Method to get the value for testing and production environments
     * @returns true in testing environment and false in production environment
     */
    public boolean getEnvironmentData()
    {
        boolean isEnvironmentMatch = false;
        try {
            ApplicationInfo mApplicationInfo = mReactApplicationContext.getPackageManager().getApplicationInfo(mReactApplicationContext.getPackageName(), PackageManager.GET_META_DATA);
            Bundle mBundle = mApplicationInfo.metaData;
            isEnvironmentMatch = mBundle.getBoolean("com.phonepe.android.sdk.isUAT");
        } catch (Exception e) {
            Log.e(mReactApplicationContext.getString(R.string.react_native_phonepe_sdk), mReactApplicationContext.getString(R.string.environment_exception));
        }
        return isEnvironmentMatch;
    }

    /**
     * Method to get the package name for testing and production environments
     * @returns the package name
     */
    public String getPackageName()
    {
        if (getEnvironmentData())
        {
           return Constants.PHONEPE_UAT_PACKAGE_NAME;
        } else {
           return Constants.PHONEPE_PRODUCTION_PACKAGE_NAME;
        }
    }

    /**
     * Method to get the url for testing and production environments
     * @param URLHandler to send the url to the react native code
     * @returns URL based on UAT / Production environments
     */
    @ReactMethod
    public void getURL(Callback URLHandler)
    {
        if (getEnvironmentData())
        {
            URLHandler.invoke(Constants.PHONEPE_UAT_URL);
        } else {
            URLHandler.invoke(Constants.PHONEPE_PRDUCTION_URL);
        }
    }

    /**
     * Method to set whether PhonePe app is installed or not and send the event to the React Code
     */
    @ReactMethod
    public void doesPhonePeExists()
    {
        boolean checkPhonePeInstalled = isUpiRegistered();
        WritableMap params = Arguments.createMap();
        params.putString(Constants.CHECK_PHONEPE_INSTALLED, ""+checkPhonePeInstalled);
        sendEvent(mReactApplicationContext, Constants.EVENT_REMINDER_PHONEPE_CHECK, params);
    }

    /**
     * Method to launch the intent URL from the React Native code
     * @param redirectUrl
     * @param uiCallbackHandler
     */
    @ReactMethod
    public void show(String redirectUrl, Callback uiCallbackHandler)
    {
        this.uiCallbackHandler = uiCallbackHandler;
        if (isUpiRegistered())
        {
            if (redirectUrl.startsWith(mReactApplicationContext.getString(R.string.intent_url)))
            {
                Intent i = new Intent(Intent.ACTION_VIEW);
                i.setData(Uri.parse(redirectUrl));
                i.setPackage(getPackageName());
                getCurrentActivity().startActivityForResult(i, PHONEPE_REQUEST);
            }
            else {
                this.uiCallbackHandler.invoke(mReactApplicationContext.getString(R.string.invalid_url));
            }
        }
        else {
            this.uiCallbackHandler.invoke(mReactApplicationContext.getString(R.string.install_phonepe));
        }
    }

    /**
     * Method to send the event to the React native code
     * @param reactContext
     * @param eventName
     * @param params
     */
    private void sendEvent(ReactContext reactContext,
                           String eventName,
                           @Nullable WritableMap params) {
        reactContext
                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit(eventName, params);
    }

    /**
     * Method to check whether the PhonePe app is installed or not
     * @return true if app is installed or false if app not installed
     */
    @ReactMethod
    private boolean isUpiRegistered() {
        String phonepePackageName = getPackageName();
        Uri uri = Uri.parse(String.format("%s://%s", Constants.UPI, Constants.PAY));
        Intent upiUriIntent = new Intent();
        upiUriIntent.setData(uri);
        PackageManager packageManager = mReactApplicationContext.getPackageManager();
        List<ResolveInfo> resolveInfoList = packageManager.queryIntentActivities(upiUriIntent, PackageManager.MATCH_DEFAULT_ONLY);
        if (resolveInfoList != null) {
            for (ResolveInfo resolveInfo : resolveInfoList) {
                String packageName = resolveInfo.activityInfo.packageName;
                if (packageName != null && !packageName.isEmpty() && phonepePackageName.matches(packageName)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     *  Method to get the PhonePe version code from the PhonePe app
     */
    @ReactMethod
    public void getPhonePeVersionCode()
    {
        if(isUpiRegistered())
        {
            PackageInfo packageInfo = null;
            try {
                packageInfo = getCurrentActivity().getPackageManager().getPackageInfo(getPackageName(), PackageManager.GET_ACTIVITIES);
                phonePeVersionCode = packageInfo.getLongVersionCode();
                WritableMap params = Arguments.createMap();
                params.putString(Constants.PHONEPE_VERSION_CODE, ""+phonePeVersionCode);
                sendEvent(mReactApplicationContext, Constants.EVENT_REMINDER_PHONEPE_VERSION, params);
            } catch (PackageManager.NameNotFoundException e) {
                Log.e(mReactApplicationContext.getString(R.string.react_native_phonepe_sdk), String.format(mReactApplicationContext.getString(R.string.failed_to_get_package_name),
                        getPackageName(), e.getMessage()));
            }
        } else {
            // do nothing
        }
    }

    @Override
    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
        if (requestCode == PHONEPE_REQUEST) {
            if (resultCode == RESULT_OK) {
                this.uiCallbackHandler.invoke(mReactApplicationContext.getString(R.string.ui_redirection_success));
            } else if (resultCode == RESULT_CANCELED) {
                this.uiCallbackHandler.invoke(mReactApplicationContext.getString(R.string.ui_redirection_failure));
            }
        }
    }

    @Override
    public void onNewIntent(Intent intent) {}
}
