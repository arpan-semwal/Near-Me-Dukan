package com.phonepepaymentsdk

import android.app.Activity
import android.content.Intent
import androidx.core.app.ActivityCompat
import com.facebook.react.bridge.ActivityEventListener
import com.facebook.react.bridge.Promise
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.WritableNativeMap
import com.phonepe.intent.sdk.api.B2BPGRequestBuilder
import com.phonepe.intent.sdk.api.PhonePe
import com.phonepe.intent.sdk.api.models.PhonePeEnvironment
import com.phonepe.intent.sdk.api.models.SDKType
import com.phonepepaymentsdk.DataUtil.convertResultToString
import com.phonepepaymentsdk.DataUtil.handleException
import com.phonepepaymentsdk.GlobalConstants.PHONEPE_PAYMENT_SDK
import com.phonepepaymentsdk.GlobalConstants.RequestCode.B2B_PG
import com.phonepepaymentsdk.GlobalConstants.RequestCode.CONTAINER
import com.phonepepaymentsdk.GlobalConstants.Response.APPLICATION_NAME
import com.phonepepaymentsdk.GlobalConstants.Response.ERROR
import com.phonepepaymentsdk.GlobalConstants.Response.FAILURE
import com.phonepepaymentsdk.GlobalConstants.Response.PACKAGE_NAME
import com.phonepepaymentsdk.GlobalConstants.Response.STATUS
import com.phonepepaymentsdk.GlobalConstants.Response.SUCCESS
import com.phonepepaymentsdk.GlobalConstants.Response.VERSION
import com.phonepepaymentsdk.LogUtil.enableLogs
import com.phonepepaymentsdk.LogUtil.logInfo
import org.json.JSONArray
import org.json.JSONObject

class PhonePePaymentSDKModule(reactContext: ReactApplicationContext) :
    ReactContextBaseJavaModule(reactContext), ActivityEventListener {

    private var promise: Promise? = null

    init {
        reactApplicationContext.addActivityEventListener(this)
        PhonePe.setAdditionalInfo(SDKType.REACT_NATIVE)
    }

    override fun getName(): String = PHONEPE_PAYMENT_SDK

    @ReactMethod
    fun isPhonePeInstalled(promise: Promise) {
        try {
            logInfo("started isPhonePeInstalled")
            promise.resolve(PhonePe.isPhonePeAppInstalled(true))
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    @ReactMethod
    fun isPaytmAppInstalled(promise: Promise) {
        try {
            logInfo("started isPaytmAppInstalled")
            promise.resolve(PhonePe.isPayTMAppInstalled(true))
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    @ReactMethod
    fun isGPayAppInstalled(promise: Promise) {
        try {
            logInfo("started isGPayAppInstalled")
            promise.resolve(PhonePe.isGooglePayAppInstalled(true))
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    @ReactMethod
    fun getPackageSignatureForAndroid(promise: Promise) {
        try {
            logInfo("started getPackageSignatureForAndroid")
            promise.resolve(PhonePe.getPackageSignature())
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    @ReactMethod
    fun getUpiAppsForAndroid(promise: Promise) {
        try {
            logInfo("started getUpiAppsForAndroid")
            val jsonArray = JSONArray()
            PhonePe.getUpiApps().forEach {
                jsonArray.put(JSONObject().apply {
                    put(PACKAGE_NAME, it.packageName)
                    put(APPLICATION_NAME, it.applicationName)
                    put(VERSION, it.version.toString())
                })
            }
            promise.resolve(jsonArray.toString())
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    @ReactMethod
    fun init(
        environment: String,
        merchantId: String,
        appId: String?,
        enableLogging: Boolean,
        promise: Promise
    ) {
        try {
            enableLogs = enableLogging
            logInfo("started init")
            if (environment.isEmpty() || merchantId.isEmpty())
                throw IllegalArgumentException("Invalid environment or merchantId!")

            val ppEnvironment = when (environment) {
                PhonePeEnvironment.SANDBOX.toString() -> PhonePeEnvironment.SANDBOX
                else -> PhonePeEnvironment.RELEASE
            }

            promise.resolve(PhonePe.init(reactApplicationContext, ppEnvironment, merchantId, appId))
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    @ReactMethod
    fun startTransaction(
        body: String,
        checkSum: String,
        packageName: String? = null,
        appSchema: String? = null,
        promise: Promise
    ) {
        try {
            logInfo("start startPGTransaction")
            this.promise = promise
            if (checkSum.isEmpty() || body.isEmpty() || reactApplicationContext.currentActivity == null)
                throw IllegalArgumentException("Invalid checksum or apiEndpoint or body!")

            val b2BPGRequest = B2BPGRequestBuilder()
                .setChecksum(checkSum)
                .setData(body)
                .build()

            ActivityCompat.startActivityForResult(
                reactApplicationContext.currentActivity!!,
                PhonePe.getImplicitIntent(
                    reactApplicationContext,
                    b2BPGRequest,
                    packageName
                )!!, B2B_PG, null
            )
        } catch (ex: Exception) {
            ex.handleException(promise)
        }
    }

    override fun onActivityResult(
        activity: Activity?,
        requestCode: Int,
        resultCode: Int,
        data: Intent?
    ) {
        try {
            logInfo("onActivityResult: requestCode:$requestCode, resultCode:$resultCode, data: ${data.convertResultToString()}")
            if (requestCode == B2B_PG || requestCode == CONTAINER)
                if (resultCode != Activity.RESULT_CANCELED)
                    promise?.resolve(WritableNativeMap().apply { putString(STATUS, SUCCESS) })
                else
                    promise?.resolve(WritableNativeMap().apply {
                        putString(STATUS, FAILURE)
                        putString(ERROR, data.convertResultToString())
                    })
            promise = null
        } catch (ex: Exception) {
            logInfo("Exception: ${ex.localizedMessage}")
        }
    }

    override fun onNewIntent(data: Intent?) {}
}
